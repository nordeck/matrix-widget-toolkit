/*
 * Copyright 2022 Nordeck IT + Consulting GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {
  RoomMemberStateEventContent,
  STATE_EVENT_ROOM_MEMBER,
  StateEvent,
  isValidRoomMemberStateEvent,
} from '@matrix-widget-toolkit/api';
import { EntityState, createEntityAdapter } from '@reduxjs/toolkit';
import { ThunkExtraArgument, baseApi } from '../store';
import { isError } from '../utils';

// Use an entity adapter to efficiently interact with a collection of events.
// The adapter provides selectors and reducers to read and manipulate a state.
const roomMembersEntityAdapter = createEntityAdapter({
  selectId: (event: StateEvent<RoomMemberStateEventContent>) => event.state_key,
});

/**
 * Endpoints to receive the current room members.
 *
 * @remarks This api extends the {@link baseApi} and should
 *          not be registered at the store.
 */
export const roomMembersApi = baseApi.injectEndpoints({
  endpoints: (builder) => ({
    /** Receive the room members of the current room */
    getRoomMembers: builder.query<
      EntityState<StateEvent<RoomMemberStateEventContent>, string>,
      void
    >({
      // do the initial loading
      async queryFn(_, { extra }) {
        const { widgetApi } = extra as ThunkExtraArgument;

        try {
          const events = await widgetApi.receiveStateEvents(
            STATE_EVENT_ROOM_MEMBER,
          );

          return {
            data: roomMembersEntityAdapter.addMany(
              roomMembersEntityAdapter.getInitialState(),
              events.filter(isValidRoomMemberStateEvent),
            ),
          };
        } catch (e) {
          return {
            error: {
              name: 'LoadFailed',
              message: `Could not load room members: ${
                isError(e) ? e.message : JSON.stringify(e)
              }`,
            },
          };
        }
      },

      // observe the room and apply updates to the redux store.
      // see also https://redux-toolkit.js.org/rtk-query/usage/streaming-updates#using-the-oncacheentryadded-lifecycle
      async onCacheEntryAdded(
        _,
        { cacheDataLoaded, cacheEntryRemoved, extra, updateCachedData },
      ) {
        const { widgetApi } = extra as ThunkExtraArgument;

        // wait until first data is cached
        await cacheDataLoaded;

        const subscription = widgetApi
          .observeStateEvents(STATE_EVENT_ROOM_MEMBER)
          .subscribe(async (event) => {
            // update the cached data if the event changes in the room
            if (isValidRoomMemberStateEvent(event)) {
              updateCachedData((state) =>
                roomMembersEntityAdapter.upsertOne(state, event),
              );
            } else {
              updateCachedData((state) =>
                roomMembersEntityAdapter.removeOne(state, event.state_key),
              );
            }
          });

        // wait until subscription is cancelled
        await cacheEntryRemoved;

        subscription.unsubscribe();
      },
    }),
  }),
});

// export the selectors that can be applied to the return value of useGetRoomMembersQuery.
export const {
  selectAll: selectAllRoomMembers,
  selectById: selectRoomMemberById,
} = roomMembersEntityAdapter.getSelectors();

// consume the store using the hooks generated by RTK Query
export const { useGetRoomMembersQuery } = roomMembersApi;
