# enable gzip
gzip on;
gzip_types application/javascript text/plain text/css application/json;

# skip the version in the "server" header
server_tokens off;

# make the __ENVIRONMENT_SCRIPT__ environment variable available for the perl ssi extension
perl_set $__ENVIRONMENT_SCRIPT__ 'sub {
  use MIME::Base64;

  $json_content="";

  $is_first=1;

  foreach $key(sort keys %ENV) {
    if ($key =~ /^REACT_APP_/) {
      if (!$is_first) {
        $json_content=$json_content . ",";
      }
      $is_first = 0;

      $json_content = $json_content . "\\"" . $key . "\\":\\"" . $ENV{$key} . "\\""; 
    }
  }

  $environment = encode_base64("{" . $json_content . "}");
  return "window.__ENVIRONMENT__ = `$environment`;";
}';

# provide additional variables that can be used in the CSP. they can also
# reference other environment variables with "${REACT_APP_*}".
perl_set $__CSP_FONT_SRC__ 'sub {
  $var = $ENV{"CSP_FONT_SRC"};
  foreach $key(sort keys %ENV) { $var =~ s/\${$key}/$ENV{$key}/g; }
  $var =~ s/\${.*}//g;
  return $var;
}';
perl_set $__CSP_STYLE_SRC__ 'sub {
  $var = $ENV{"CSP_STYLE_SRC"};
  foreach $key(sort keys %ENV) { $var =~ s/\${$key}/$ENV{$key}/g; }
  $var =~ s/\${.*}//g;
  return $var;
}';
perl_set $__CSP_SCRIPT_SRC__ 'sub {
  $var = $ENV{"CSP_SCRIPT_SRC"};
  foreach $key(sort keys %ENV) { $var =~ s/\${$key}/$ENV{$key}/g; }
  $var =~ s/\${.*}//g;
  return $var;
}';
perl_set $__CSP_IMG_SRC__ 'sub {
  $var = $ENV{"CSP_IMG_SRC"};
  foreach $key(sort keys %ENV) { $var =~ s/\${$key}/$ENV{$key}/g; }
  $var =~ s/\${.*}//g;
  return $var;
}';
perl_set $__CSP_CONNECT_SRC__ 'sub {
  $var = $ENV{"CSP_CONNECT_SRC"};
  foreach $key(sort keys %ENV) { $var =~ s/\${$key}/$ENV{$key}/g; }
  $var =~ s/\${.*}//g;
  return $var;
}';

server {
  listen [::]:8080 ipv6only=off;

  # Disable automatic detection of content types
  add_header X-Content-Type-Options "nosniff";

  # never cache files by default
  add_header Cache-Control "public, max-age=0, must-revalidate";

  # include additional headers that are located in separate files (CSP, ...)
  include /etc/nginx/conf.d/headers/*.conf;

  # Generate nonce from request_id should be sufficient:
  # https://serverfault.com/questions/934801/is-it-a-good-idea-to-use-nginx-request-id-for-csp-nonce-value
  set $cspNonce $request_id;
  # Generate CSP nonce entry that is used for both the injected style and 
  # script tags
  set $__STYLE_CSP_NONCE__ "'nonce-${cspNonce}'";
  # Generate a script that sets the nonce
  set $__STYLE_NONCE_SCRIPT__ "window.NONCE = '${cspNonce}';";
  # Combine environment config and nonce
  set $__INJECT_SCRIPT_TAG__ "<script nonce='${cspNonce}'>${__STYLE_NONCE_SCRIPT__} ${__ENVIRONMENT_SCRIPT__}</script>";

  root /usr/share/nginx/html;

  location / {
    # enable SSI for the files. We use it to inject the environment variables
    ssi on;
    try_files $uri $uri/ /index.html;
  }

  # cache all files in the "/static" folder (css, js, ...) because
  # they have a hash in the filename.
  location /static {
    add_header Cache-Control "public, max-age=31556926";
  }
}
